// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

import 'env/provider.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
///  import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions web = FirebaseOptions(
    apiKey: webConfig.apiKey,
    appId: webConfig.appId,
    messagingSenderId: webConfig.messagingSenderId,
    projectId: webConfig.projectId,
    authDomain: webConfig.authDomain,
    storageBucket: webConfig.storageBucket,
    measurementId: webConfig.measurementId,
  );

  static FirebaseOptions android = FirebaseOptions(
    apiKey: androidConfig.apiKey,
    appId: androidConfig.appId,
    messagingSenderId: androidConfig.messagingSenderId,
    projectId: androidConfig.projectId,
    storageBucket: androidConfig.storageBucket,
  );

  static FirebaseOptions ios = FirebaseOptions(
    apiKey: iosConfig.apiKey,
    appId: iosConfig.appId,
    messagingSenderId: iosConfig.messagingSenderId,
    projectId: iosConfig.projectId,
    storageBucket: iosConfig.storageBucket,
    iosBundleId: iosConfig.iosBundleId,
  );

  static FirebaseOptions macos = FirebaseOptions(
    apiKey: macosConfig.apiKey,
    appId: macosConfig.appId,
    messagingSenderId: macosConfig.messagingSenderId,
    projectId: macosConfig.projectId,
    storageBucket: macosConfig.storageBucket,
    iosBundleId: macosConfig.iosBundleId,
  );

  static FirebaseOptions windows = FirebaseOptions(
    apiKey: windowsConfig.apiKey,
    appId: windowsConfig.appId,
    messagingSenderId: windowsConfig.messagingSenderId,
    projectId: windowsConfig.projectId,
    authDomain: windowsConfig.authDomain,
    storageBucket: windowsConfig.storageBucket,
    measurementId: windowsConfig.measurementId,
  );
}
